// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: display-vs:vert
      frag: display-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        highlightCol: { value: [0.0, 0.0, 0.0, 1.0], editor: { type: color } }
        eatColor: { value: [0.0, 0.0, 0.0, 1.0], editor: { type: color } }
        eatRatio: { value: 0 }
        width: { value: 700 }
        height: { value: 700 }
        strength: { value: 0.9 }
}%

CCProgram display-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = vec2(a_texCoord.x, 1.0 - a_texCoord.y);
    color = a_color;

    return pos;
  }
}%

CCProgram display-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;

  uniform Const {
    vec4 highlightCol;
    float height;
    float width;
    float strength;
  };

  uniform Const2 {
    vec4 eatColor;
    float eatRatio;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      float widthStep = 1. / width;
      float heightStep = 1. / height;
      const float radius = 2.0;
      const float blurPixels = (radius * 2.0 + 1.0) * (radius * 2.0 + 1.0);

      float sumAlpha = 0.;
      for(float fy = -radius; fy <= radius; ++fy)
      {
        for(float fx = -radius; fx <= radius; ++fx)
        {
          vec2 coord = vec2(fx * widthStep, fy * heightStep);
          sumAlpha += CCSampleWithAlphaSeparated(cc_spriteTexture, uv0 + coord).a;
        }
      }

      float blur = (sumAlpha / blurPixels) * (1.0 + strength);
      vec4 blend = mix(vec4(0., 0., 0., 1.), eatColor, eatRatio);
      vec4 tex = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      vec4 screen = vec4(1.) - (vec4(1.) - tex) * (vec4(1.) - blend);
      o = mix(vec4(highlightCol.rgb, clamp(blur, 0., 1.0)), screen, tex.a);

      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;

    ALPHA_TEST(o);
    return o;
  }
}%
